import pandas as pd
import numpy as np
import plotly.plotly as py
import plotly.graph_objs as go

import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

import matplotlib.pyplot as plt

import tkinter as tk
from tkinter import ttk

# import all csv files with pandas
gezondheidinwoner = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/vraag1 ggd.csv")
Veiliginwoners = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Percentage onveilig inwoners vraag 3GGD.csv")
diefstal = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Diefstal.csv")
drugsoverlast = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Drugsoverlast.csv")
geweld = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Geweld.csv")
inbraak = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Inbraak.csv")
overlast = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Overlast.csv")
schoon_en_heel = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Schoon en heel.csv")
tevredenheid = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Tevredenheid.csv")
gemiddelde = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Gemiddelde.csv")
vandalisme = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Vandalisme.csv")
verkeer = pd.read_csv("C:/Users/Tahsin/Desktop/csv bestanden/Verkeer.csv")

# Needed for the graphs
deelgemeentes = ['Charlois', 'Delfshaven', 'Feijenoord', 'Hillegersberg-Schiebroek', 'Hoek van Holland', 'Hoogvliet', 
                 'IJsselmonde', 'Kralingen-Crooswijk', 'Noord', 'Overschie', 'Pernis', 'Prins Alexander', 'Stadscentrum', 'Rotterdam'] 
gemeente = ['Rotterdam']

# All colors for the plot lines
tableau20 = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),  
             (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),  
             (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),  
             (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),  
             (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]
# make the colors useable
for i in range(len(tableau20)):  
    r, g, b = tableau20[i]  
    tableau20[i] = (r / 255., g / 255., b / 255.)

# font duh 
LARGE_FONT= ("Verdana", 12)

# main program
class Main(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        tk.Tk.wm_title(self, "Data application.")
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        for F in (StartPage, PageOne, PageTwo, PageThree, PageFour, PageFive, PageSix, PageSeven, PageEight, PageNine, PageTen, PageEleven):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()

# start page "menu". All buttons are made here         
class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="Menu", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button = ttk.Button(self, text="Theft",
                            command=lambda: controller.show_frame(PageOne))
        button.pack()

        button2 = ttk.Button(self, text="Menace",
                            command=lambda: controller.show_frame(PageTwo))
        button2.pack()

        button3 = ttk.Button(self, text="Violence",
                            command=lambda: controller.show_frame(PageThree))
        button3.pack()

        button4 = ttk.Button(self, text="Burglary",
                            command=lambda: controller.show_frame(PageFour))
        button4.pack()

        button5 = ttk.Button(self, text="Nuisance",
                            command=lambda: controller.show_frame(PageFive))
        button5.pack()

        button6 = ttk.Button(self, text="Environment",
                            command=lambda: controller.show_frame(PageSix))
        button6.pack()

        button7= ttk.Button(self, text="Vandalism",
                            command=lambda: controller.show_frame(PageSeven))
        button7.pack()

        button8 = ttk.Button(self, text="Traffic",
                            command=lambda: controller.show_frame(PageEight))
        button8.pack()

        button9 = ttk.Button(self, text="Citizen's health",
                            command=lambda: controller.show_frame(PageNine))
        button9.pack()

        button10 = ttk.Button(self, text="health peoples",
                            command=lambda: controller.show_frame(PageTen))
        button10.pack()

        button11 = ttk.Button(self, text="Safety citizen",
                            command=lambda: controller.show_frame(PageEleven))
        button11.pack()


# First button, shows graphs by reading the csv file. Same goes for all other Page classes.
class PageOne(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Theft by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()
        #figure is made here 
        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color 
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(diefstal.Year.values,  
            diefstal[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            # set label names
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = diefstal[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Noord":  
                y_pos += 0.1 
            elif column == "Stadscentrum":
                y_pos -= 0.2
            elif column == "Overschie":
                y_pos -= 0.2
            # location of the name of the lines (legend)
            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])

        # show it 
        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)



class PageTwo(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Menace by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()
        #figure is made here
        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(drugsoverlast.Year.values,  
            drugsoverlast[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            # set label names
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = drugsoverlast[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Feijenoord":  
                y_pos -= 0.3
            elif column == "Kralingen-Crooswijk":
                y_pos -= 0.5
            elif column == "Noord":
                y_pos -= 0.2

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)


class PageThree(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Violence by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(geweld.Year.values,  
            geweld[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = geweld[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Stadscentrum":  
                y_pos -= 0.2
            elif column == "Noord":
                y_pos -= 0.1

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageFour(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Burglary by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(inbraak.Year.values,  
            inbraak[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')

            y_pos = inbraak[column.replace("\n", " ")].values[-1] - 0.1

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageFive(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Nuisance by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(overlast.Year.values,  
            overlast[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = overlast[column.replace("\n", " ")].values[-1] - 0.1
            if column == "IJsselmonde":  
                y_pos -= 0.1
            elif column == "Hoek van Holland":
                y_pos += 0.1

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageSix(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Environment by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(schoon_en_heel.Year.values,  
            schoon_en_heel[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = schoon_en_heel[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Charlois":  
                y_pos -= 0.3
            elif column == "Hoek van Holland":
                y_pos -= 0.2

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageSeven(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Vandalism by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(vandalisme.Year.values,  
            vandalisme[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = vandalisme[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Overschie":  
                y_pos -= 0.2
            elif column == "Prins Alexander":
                y_pos -= 0.2
            elif column == "Charlois":
                y_pos -= 0.1

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageEight(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Traffic by borough (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            plt.plot(verkeer.Year.values,  
            verkeer[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank])
            
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            # adjusts position of the names of the lines and the right side so it doesn't overlap each other
            y_pos = verkeer[column.replace("\n", " ")].values[-1] - 0.1
            if column == "Hillegersberg-Schiebroek":  
                y_pos -= 0.2
            elif column == "Kralingen-Crooswijk":
                y_pos -= 0.3
            elif column == "Prins Alexander":
                y_pos -= 0.1

            plt.text(2011.30, y_pos, column, fontsize=10, color=tableau20[rank])


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

class PageNine(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Average Safetyproblems (2006-2011)", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(gemeente):  
            plt.plot(tevredenheid.Year.values,  
            tevredenheid[column.replace("\n", " ")].values,  
            lw=2.5, color=tableau20[rank], label = 'Satisfaction Rotterdam')
            # shows the second line in the same graph but with a different line style.
            plt.plot(gemiddelde.Year.values,
                     gemiddelde[column.replace("\n", " ")].values, color = 'r', marker = 'o', linestyle = '--',
                     linewidth = 2.0, label = 'Safetyproblems Rotterdam')
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            plt.legend(loc='upper right')


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)


class PageTen(tk.Frame):
    # Speciaal plekje voor GGD grafiek
    # vraag 1 Percentage inwoners van 16 jaar en ouder dat ooit slachtoffer is geweest van huiselijk geweld
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Citizen's health", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            
            plt.plot(gezondheidinwoner.Year.values,
                     gezondheidinwoner[column.replace("\n", " ")].values, marker = 'o', linestyle = '--',
                     linewidth = 2.5, color=tableau20[rank],label = deelgemeentes[rank])
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            plt.legend(loc='upper right')


        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
                     


class PageEleven(tk.Frame):
    # Ditto
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Safety citizen", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        f = Figure(figsize=(5,5), dpi=100) 

        plt = f.add_subplot(111)
        # graph information is gathered here from the csv file and given a color
        for rank, column in enumerate(deelgemeentes):  
            
            plt.plot(Veiliginwoners.Year.values,
                     Veiliginwoners[column.replace("\n", " ")].values, marker = 'o', linestyle = '--',
                     linewidth = 1.0, color=tableau20[rank],label = deelgemeentes[rank])
            
            plt.set_xlabel('Year')
            plt.set_ylabel('Percentage')
            plt.legend(loc='upper right')

        canvas = FigureCanvasTkAgg(f, self)
        canvas.show()
        canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(canvas, self)
        toolbar.update()
        canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# runs it 
app = Main()
app.mainloop()
